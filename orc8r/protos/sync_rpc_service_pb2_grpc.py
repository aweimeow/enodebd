# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from orc8r.protos import sync_rpc_service_pb2 as orc8r_dot_protos_dot_sync__rpc__service__pb2


class SyncRPCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstablishSyncRPCStream = channel.stream_stream(
                '/magma.orc8r.SyncRPCService/EstablishSyncRPCStream',
                request_serializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCResponse.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCRequest.FromString,
                )
        self.SyncRPC = channel.stream_stream(
                '/magma.orc8r.SyncRPCService/SyncRPC',
                request_serializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCResponse.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCRequest.FromString,
                )


class SyncRPCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EstablishSyncRPCStream(self, request_iterator, context):
        """creates a bidirectional stream from gateway to cloud
        so cloud can send in SyncRPCRequest, and wait for SyncRPCResponse.
        This will be the underlying service for Synchronous RPC from the cloud.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncRPC(self, request_iterator, context):
        """same method as EstablishSyncRPCStream, but named differently for backward compatibility
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyncRPCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstablishSyncRPCStream': grpc.stream_stream_rpc_method_handler(
                    servicer.EstablishSyncRPCStream,
                    request_deserializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCResponse.FromString,
                    response_serializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCRequest.SerializeToString,
            ),
            'SyncRPC': grpc.stream_stream_rpc_method_handler(
                    servicer.SyncRPC,
                    request_deserializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCResponse.FromString,
                    response_serializer=orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.orc8r.SyncRPCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SyncRPCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EstablishSyncRPCStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/magma.orc8r.SyncRPCService/EstablishSyncRPCStream',
            orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCResponse.SerializeToString,
            orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncRPC(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/magma.orc8r.SyncRPCService/SyncRPC',
            orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCResponse.SerializeToString,
            orc8r_dot_protos_dot_sync__rpc__service__pb2.SyncRPCRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
