# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from orc8r.protos import common_pb2 as orc8r_dot_protos_dot_common__pb2
from orc8r.protos import tenants_pb2 as orc8r_dot_protos_dot_tenants__pb2


class TenantsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllTenants = channel.unary_unary(
                '/magma.orc8r.TenantsService/GetAllTenants',
                request_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_tenants__pb2.TenantList.FromString,
                )
        self.GetTenant = channel.unary_unary(
                '/magma.orc8r.TenantsService/GetTenant',
                request_serializer=orc8r_dot_protos_dot_tenants__pb2.GetTenantRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_tenants__pb2.Tenant.FromString,
                )
        self.CreateTenant = channel.unary_unary(
                '/magma.orc8r.TenantsService/CreateTenant',
                request_serializer=orc8r_dot_protos_dot_tenants__pb2.IDAndTenant.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.SetTenant = channel.unary_unary(
                '/magma.orc8r.TenantsService/SetTenant',
                request_serializer=orc8r_dot_protos_dot_tenants__pb2.IDAndTenant.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.DeleteTenant = channel.unary_unary(
                '/magma.orc8r.TenantsService/DeleteTenant',
                request_serializer=orc8r_dot_protos_dot_tenants__pb2.GetTenantRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )


class TenantsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllTenants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TenantsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllTenants': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTenants,
                    request_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                    response_serializer=orc8r_dot_protos_dot_tenants__pb2.TenantList.SerializeToString,
            ),
            'GetTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTenant,
                    request_deserializer=orc8r_dot_protos_dot_tenants__pb2.GetTenantRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_tenants__pb2.Tenant.SerializeToString,
            ),
            'CreateTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTenant,
                    request_deserializer=orc8r_dot_protos_dot_tenants__pb2.IDAndTenant.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'SetTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTenant,
                    request_deserializer=orc8r_dot_protos_dot_tenants__pb2.IDAndTenant.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'DeleteTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTenant,
                    request_deserializer=orc8r_dot_protos_dot_tenants__pb2.GetTenantRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.orc8r.TenantsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TenantsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllTenants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.TenantsService/GetAllTenants',
            orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            orc8r_dot_protos_dot_tenants__pb2.TenantList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.TenantsService/GetTenant',
            orc8r_dot_protos_dot_tenants__pb2.GetTenantRequest.SerializeToString,
            orc8r_dot_protos_dot_tenants__pb2.Tenant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.TenantsService/CreateTenant',
            orc8r_dot_protos_dot_tenants__pb2.IDAndTenant.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.TenantsService/SetTenant',
            orc8r_dot_protos_dot_tenants__pb2.IDAndTenant.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.TenantsService/DeleteTenant',
            orc8r_dot_protos_dot_tenants__pb2.GetTenantRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
