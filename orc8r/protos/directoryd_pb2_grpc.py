# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from orc8r.protos import common_pb2 as orc8r_dot_protos_dot_common__pb2
from orc8r.protos import directoryd_pb2 as orc8r_dot_protos_dot_directoryd__pb2


class DirectoryLookupStub(object):
    """DirectoryLookup service associates various identities and locations.
    This service runs in the controller, generating and consuming mostly derived state.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHostnameForHWID = channel.unary_unary(
                '/magma.orc8r.DirectoryLookup/GetHostnameForHWID',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetHostnameForHWIDRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetHostnameForHWIDResponse.FromString,
                )
        self.MapHWIDsToHostnames = channel.unary_unary(
                '/magma.orc8r.DirectoryLookup/MapHWIDsToHostnames',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.MapHWIDToHostnameRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.GetIMSIForSessionID = channel.unary_unary(
                '/magma.orc8r.DirectoryLookup/GetIMSIForSessionID',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetIMSIForSessionIDRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetIMSIForSessionIDResponse.FromString,
                )
        self.MapSessionIDsToIMSIs = channel.unary_unary(
                '/magma.orc8r.DirectoryLookup/MapSessionIDsToIMSIs',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.MapSessionIDToIMSIRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.GetHWIDForSgwCTeid = channel.unary_unary(
                '/magma.orc8r.DirectoryLookup/GetHWIDForSgwCTeid',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetHWIDForSgwCTeidRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetHWIDForSgwCTeidResponse.FromString,
                )
        self.MapSgwCTeidToHWID = channel.unary_unary(
                '/magma.orc8r.DirectoryLookup/MapSgwCTeidToHWID',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.MapSgwCTeidToHWIDRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )


class DirectoryLookupServicer(object):
    """DirectoryLookup service associates various identities and locations.
    This service runs in the controller, generating and consuming mostly derived state.
    """

    def GetHostnameForHWID(self, request, context):
        """GetHostnameForHWID returns the hostname mapped to by hardware ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MapHWIDsToHostnames(self, request, context):
        """MapHWIDsToHostnames maps {hwid -> hostname}.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIMSIForSessionID(self, request, context):
        """GetIMSIForSessionID returns the IMSI mapped to by session ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MapSessionIDsToIMSIs(self, request, context):
        """MapSessionIDsToIMSIs maps {session ID -> IMSI}.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHWIDForSgwCTeid(self, request, context):
        """GetHWIDForSgwCTeid returns the HwId mapped to by sgw control plane Sgw Teid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MapSgwCTeidToHWID(self, request, context):
        """MapSgwCTeidToHWID maps {teid -> HwId}.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DirectoryLookupServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetHostnameForHWID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHostnameForHWID,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetHostnameForHWIDRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetHostnameForHWIDResponse.SerializeToString,
            ),
            'MapHWIDsToHostnames': grpc.unary_unary_rpc_method_handler(
                    servicer.MapHWIDsToHostnames,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.MapHWIDToHostnameRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'GetIMSIForSessionID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIMSIForSessionID,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetIMSIForSessionIDRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetIMSIForSessionIDResponse.SerializeToString,
            ),
            'MapSessionIDsToIMSIs': grpc.unary_unary_rpc_method_handler(
                    servicer.MapSessionIDsToIMSIs,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.MapSessionIDToIMSIRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'GetHWIDForSgwCTeid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHWIDForSgwCTeid,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetHWIDForSgwCTeidRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetHWIDForSgwCTeidResponse.SerializeToString,
            ),
            'MapSgwCTeidToHWID': grpc.unary_unary_rpc_method_handler(
                    servicer.MapSgwCTeidToHWID,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.MapSgwCTeidToHWIDRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.orc8r.DirectoryLookup', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DirectoryLookup(object):
    """DirectoryLookup service associates various identities and locations.
    This service runs in the controller, generating and consuming mostly derived state.
    """

    @staticmethod
    def GetHostnameForHWID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.DirectoryLookup/GetHostnameForHWID',
            orc8r_dot_protos_dot_directoryd__pb2.GetHostnameForHWIDRequest.SerializeToString,
            orc8r_dot_protos_dot_directoryd__pb2.GetHostnameForHWIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MapHWIDsToHostnames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.DirectoryLookup/MapHWIDsToHostnames',
            orc8r_dot_protos_dot_directoryd__pb2.MapHWIDToHostnameRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIMSIForSessionID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.DirectoryLookup/GetIMSIForSessionID',
            orc8r_dot_protos_dot_directoryd__pb2.GetIMSIForSessionIDRequest.SerializeToString,
            orc8r_dot_protos_dot_directoryd__pb2.GetIMSIForSessionIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MapSessionIDsToIMSIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.DirectoryLookup/MapSessionIDsToIMSIs',
            orc8r_dot_protos_dot_directoryd__pb2.MapSessionIDToIMSIRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHWIDForSgwCTeid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.DirectoryLookup/GetHWIDForSgwCTeid',
            orc8r_dot_protos_dot_directoryd__pb2.GetHWIDForSgwCTeidRequest.SerializeToString,
            orc8r_dot_protos_dot_directoryd__pb2.GetHWIDForSgwCTeidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MapSgwCTeidToHWID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.DirectoryLookup/MapSgwCTeidToHWID',
            orc8r_dot_protos_dot_directoryd__pb2.MapSgwCTeidToHWIDRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GatewayDirectoryServiceStub(object):
    """GatewayDirectoryService allows for associating various identities to a
    record. This service runs on the gateways.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateRecord = channel.unary_unary(
                '/magma.orc8r.GatewayDirectoryService/UpdateRecord',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.UpdateRecordRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.DeleteRecord = channel.unary_unary(
                '/magma.orc8r.GatewayDirectoryService/DeleteRecord',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.DeleteRecordRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.GetDirectoryField = channel.unary_unary(
                '/magma.orc8r.GatewayDirectoryService/GetDirectoryField',
                request_serializer=orc8r_dot_protos_dot_directoryd__pb2.GetDirectoryFieldRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_directoryd__pb2.DirectoryField.FromString,
                )
        self.GetAllDirectoryRecords = channel.unary_unary(
                '/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords',
                request_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_directoryd__pb2.AllDirectoryRecords.FromString,
                )


class GatewayDirectoryServiceServicer(object):
    """GatewayDirectoryService allows for associating various identities to a
    record. This service runs on the gateways.
    """

    def UpdateRecord(self, request, context):
        """Update the directory record of an object in the directory service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRecord(self, request, context):
        """Delete directory record of an object from the directory service
        Throws UNKNOWN if object ID does not exist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDirectoryField(self, request, context):
        """Get directory field for a given id and key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllDirectoryRecords(self, request, context):
        """Get all directory records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayDirectoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRecord,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.UpdateRecordRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'DeleteRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRecord,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.DeleteRecordRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'GetDirectoryField': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDirectoryField,
                    request_deserializer=orc8r_dot_protos_dot_directoryd__pb2.GetDirectoryFieldRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_directoryd__pb2.DirectoryField.SerializeToString,
            ),
            'GetAllDirectoryRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllDirectoryRecords,
                    request_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                    response_serializer=orc8r_dot_protos_dot_directoryd__pb2.AllDirectoryRecords.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.orc8r.GatewayDirectoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GatewayDirectoryService(object):
    """GatewayDirectoryService allows for associating various identities to a
    record. This service runs on the gateways.
    """

    @staticmethod
    def UpdateRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.GatewayDirectoryService/UpdateRecord',
            orc8r_dot_protos_dot_directoryd__pb2.UpdateRecordRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.GatewayDirectoryService/DeleteRecord',
            orc8r_dot_protos_dot_directoryd__pb2.DeleteRecordRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDirectoryField(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.GatewayDirectoryService/GetDirectoryField',
            orc8r_dot_protos_dot_directoryd__pb2.GetDirectoryFieldRequest.SerializeToString,
            orc8r_dot_protos_dot_directoryd__pb2.DirectoryField.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllDirectoryRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.orc8r.GatewayDirectoryService/GetAllDirectoryRecords',
            orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            orc8r_dot_protos_dot_directoryd__pb2.AllDirectoryRecords.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
