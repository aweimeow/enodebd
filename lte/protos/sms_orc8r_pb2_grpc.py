# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lte.protos import sms_orc8r_pb2 as lte_dot_protos_dot_sms__orc8r__pb2
from orc8r.protos import common_pb2 as orc8r_dot_protos_dot_common__pb2


class SMSOrc8rServiceStub(object):
    """smsd-gw component of service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SMOUplink = channel.unary_unary(
                '/magma.lte.SMSOrc8rService/SMOUplink',
                request_serializer=lte_dot_protos_dot_sms__orc8r__pb2.SMOUplinkUnitdata.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )


class SMSOrc8rServiceServicer(object):
    """smsd-gw component of service
    """

    def SMOUplink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SMSOrc8rServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SMOUplink': grpc.unary_unary_rpc_method_handler(
                    servicer.SMOUplink,
                    request_deserializer=lte_dot_protos_dot_sms__orc8r__pb2.SMOUplinkUnitdata.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.lte.SMSOrc8rService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SMSOrc8rService(object):
    """smsd-gw component of service
    """

    @staticmethod
    def SMOUplink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.SMSOrc8rService/SMOUplink',
            lte_dot_protos_dot_sms__orc8r__pb2.SMOUplinkUnitdata.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SMSOrc8rGatewayServiceStub(object):
    """MME component of service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SMODownlink = channel.unary_unary(
                '/magma.lte.SMSOrc8rGatewayService/SMODownlink',
                request_serializer=lte_dot_protos_dot_sms__orc8r__pb2.SMODownlinkUnitdata.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )


class SMSOrc8rGatewayServiceServicer(object):
    """MME component of service
    """

    def SMODownlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SMSOrc8rGatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SMODownlink': grpc.unary_unary_rpc_method_handler(
                    servicer.SMODownlink,
                    request_deserializer=lte_dot_protos_dot_sms__orc8r__pb2.SMODownlinkUnitdata.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.lte.SMSOrc8rGatewayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SMSOrc8rGatewayService(object):
    """MME component of service
    """

    @staticmethod
    def SMODownlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.SMSOrc8rGatewayService/SMODownlink',
            lte_dot_protos_dot_sms__orc8r__pb2.SMODownlinkUnitdata.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SmsDStub(object):
    """smsd-cloud service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportDelivery = channel.unary_unary(
                '/magma.lte.SmsD/ReportDelivery',
                request_serializer=lte_dot_protos_dot_sms__orc8r__pb2.ReportDeliveryRequest.SerializeToString,
                response_deserializer=lte_dot_protos_dot_sms__orc8r__pb2.ReportDeliveryResponse.FromString,
                )
        self.GetMessages = channel.unary_unary(
                '/magma.lte.SmsD/GetMessages',
                request_serializer=lte_dot_protos_dot_sms__orc8r__pb2.GetMessagesRequest.SerializeToString,
                response_deserializer=lte_dot_protos_dot_sms__orc8r__pb2.GetMessagesResponse.FromString,
                )


class SmsDServicer(object):
    """smsd-cloud service definition
    """

    def ReportDelivery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SmsDServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportDelivery': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportDelivery,
                    request_deserializer=lte_dot_protos_dot_sms__orc8r__pb2.ReportDeliveryRequest.FromString,
                    response_serializer=lte_dot_protos_dot_sms__orc8r__pb2.ReportDeliveryResponse.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=lte_dot_protos_dot_sms__orc8r__pb2.GetMessagesRequest.FromString,
                    response_serializer=lte_dot_protos_dot_sms__orc8r__pb2.GetMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.lte.SmsD', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SmsD(object):
    """smsd-cloud service definition
    """

    @staticmethod
    def ReportDelivery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.SmsD/ReportDelivery',
            lte_dot_protos_dot_sms__orc8r__pb2.ReportDeliveryRequest.SerializeToString,
            lte_dot_protos_dot_sms__orc8r__pb2.ReportDeliveryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.SmsD/GetMessages',
            lte_dot_protos_dot_sms__orc8r__pb2.GetMessagesRequest.SerializeToString,
            lte_dot_protos_dot_sms__orc8r__pb2.GetMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
