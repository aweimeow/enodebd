# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lte.protos import mobilityd_pb2 as lte_dot_protos_dot_mobilityd__pb2
from lte.protos import subscriberdb_pb2 as lte_dot_protos_dot_subscriberdb__pb2
from orc8r.protos import common_pb2 as orc8r_dot_protos_dot_common__pb2


class MobilityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddIPBlock = channel.unary_unary(
                '/magma.lte.MobilityService/AddIPBlock',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.IPBlock.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.ListAddedIPv4Blocks = channel.unary_unary(
                '/magma.lte.MobilityService/ListAddedIPv4Blocks',
                request_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.ListAddedIPBlocksResponse.FromString,
                )
        self.ListAllocatedIPs = channel.unary_unary(
                '/magma.lte.MobilityService/ListAllocatedIPs',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.IPBlock.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.ListAllocatedIPsResponse.FromString,
                )
        self.AllocateIPAddress = channel.unary_unary(
                '/magma.lte.MobilityService/AllocateIPAddress',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.AllocateIPRequest.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.AllocateIPAddressResponse.FromString,
                )
        self.ReleaseIPAddress = channel.unary_unary(
                '/magma.lte.MobilityService/ReleaseIPAddress',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.ReleaseIPRequest.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )
        self.GetIPForSubscriber = channel.unary_unary(
                '/magma.lte.MobilityService/GetIPForSubscriber',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.IPLookupRequest.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.IPAddress.FromString,
                )
        self.GetSubscriberIDFromIP = channel.unary_unary(
                '/magma.lte.MobilityService/GetSubscriberIDFromIP',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.IPAddress.SerializeToString,
                response_deserializer=lte_dot_protos_dot_subscriberdb__pb2.SubscriberID.FromString,
                )
        self.GetSubscriberIPTable = channel.unary_unary(
                '/magma.lte.MobilityService/GetSubscriberIPTable',
                request_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.SubscriberIPTable.FromString,
                )
        self.RemoveIPBlock = channel.unary_unary(
                '/magma.lte.MobilityService/RemoveIPBlock',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.RemoveIPBlockRequest.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.RemoveIPBlockResponse.FromString,
                )
        self.ListGatewayInfo = channel.unary_unary(
                '/magma.lte.MobilityService/ListGatewayInfo',
                request_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
                response_deserializer=lte_dot_protos_dot_mobilityd__pb2.ListGWInfoResponse.FromString,
                )
        self.SetGatewayInfo = channel.unary_unary(
                '/magma.lte.MobilityService/SetGatewayInfo',
                request_serializer=lte_dot_protos_dot_mobilityd__pb2.GWInfo.SerializeToString,
                response_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                )


class MobilityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddIPBlock(self, request, context):
        """Add a range of IP addresses into the free IP pool
        Throws INVALID_ARGUMENT if IPBlock is invalid
        Throws FAILED_PRECONDITION if IPBlock overlaps with existing ones

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAddedIPv4Blocks(self, request, context):
        """Return a list of assigned IP blocks

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllocatedIPs(self, request, context):
        """Return a list of allocated IPs inside a IP block
        Throws INVALID_ARGUMENT if IPBlock is invalid
        Throws FAILED_PRECONDITION if IPBlock is not previously assigned

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateIPAddress(self, request, context):
        """Allocate an IP address from the free IP pool
        Throws RESOURCE_EXHAUSTED if no free IP available
        Throws ALREADY_EXISTS if an IP has been allocated for the subscriber

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseIPAddress(self, request, context):
        """Release and recycle an allocated IP address
        Throws NOT_FOUND if the requested (SID, IP) pair is not found

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIPForSubscriber(self, request, context):
        """Gets subscriber's IP address. Throws NOT_FOUND if it doesn't exist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubscriberIDFromIP(self, request, context):
        """Gets subscriber's ID from an IP Address.
        Throws NOT_FOUND if it doesn't exist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubscriberIPTable(self, request, context):
        """Get the full subscriber table
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveIPBlock(self, request, context):
        """Remove allocated IP blocks
        Default behavior is to only remove all IP blocks that have no IP addresses
        allocated from them. If force is set, then will remove all IP blocks,
        regardless of whether any IPs have been allocated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGatewayInfo(self, request, context):
        """Get Internet Gateway and  mac addresss
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGatewayInfo(self, request, context):
        """Set ip and mac address of def Internet Gateway
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MobilityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddIPBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.AddIPBlock,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.IPBlock.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'ListAddedIPv4Blocks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAddedIPv4Blocks,
                    request_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.ListAddedIPBlocksResponse.SerializeToString,
            ),
            'ListAllocatedIPs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllocatedIPs,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.IPBlock.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.ListAllocatedIPsResponse.SerializeToString,
            ),
            'AllocateIPAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateIPAddress,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.AllocateIPRequest.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.AllocateIPAddressResponse.SerializeToString,
            ),
            'ReleaseIPAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseIPAddress,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.ReleaseIPRequest.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
            'GetIPForSubscriber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIPForSubscriber,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.IPLookupRequest.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.IPAddress.SerializeToString,
            ),
            'GetSubscriberIDFromIP': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubscriberIDFromIP,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.IPAddress.FromString,
                    response_serializer=lte_dot_protos_dot_subscriberdb__pb2.SubscriberID.SerializeToString,
            ),
            'GetSubscriberIPTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubscriberIPTable,
                    request_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.SubscriberIPTable.SerializeToString,
            ),
            'RemoveIPBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveIPBlock,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.RemoveIPBlockRequest.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.RemoveIPBlockResponse.SerializeToString,
            ),
            'ListGatewayInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGatewayInfo,
                    request_deserializer=orc8r_dot_protos_dot_common__pb2.Void.FromString,
                    response_serializer=lte_dot_protos_dot_mobilityd__pb2.ListGWInfoResponse.SerializeToString,
            ),
            'SetGatewayInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGatewayInfo,
                    request_deserializer=lte_dot_protos_dot_mobilityd__pb2.GWInfo.FromString,
                    response_serializer=orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'magma.lte.MobilityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MobilityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddIPBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/AddIPBlock',
            lte_dot_protos_dot_mobilityd__pb2.IPBlock.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAddedIPv4Blocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/ListAddedIPv4Blocks',
            orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.ListAddedIPBlocksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllocatedIPs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/ListAllocatedIPs',
            lte_dot_protos_dot_mobilityd__pb2.IPBlock.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.ListAllocatedIPsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllocateIPAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/AllocateIPAddress',
            lte_dot_protos_dot_mobilityd__pb2.AllocateIPRequest.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.AllocateIPAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseIPAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/ReleaseIPAddress',
            lte_dot_protos_dot_mobilityd__pb2.ReleaseIPRequest.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIPForSubscriber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/GetIPForSubscriber',
            lte_dot_protos_dot_mobilityd__pb2.IPLookupRequest.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.IPAddress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubscriberIDFromIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/GetSubscriberIDFromIP',
            lte_dot_protos_dot_mobilityd__pb2.IPAddress.SerializeToString,
            lte_dot_protos_dot_subscriberdb__pb2.SubscriberID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubscriberIPTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/GetSubscriberIPTable',
            orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.SubscriberIPTable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveIPBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/RemoveIPBlock',
            lte_dot_protos_dot_mobilityd__pb2.RemoveIPBlockRequest.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.RemoveIPBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGatewayInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/ListGatewayInfo',
            orc8r_dot_protos_dot_common__pb2.Void.SerializeToString,
            lte_dot_protos_dot_mobilityd__pb2.ListGWInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGatewayInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/magma.lte.MobilityService/SetGatewayInfo',
            lte_dot_protos_dot_mobilityd__pb2.GWInfo.SerializeToString,
            orc8r_dot_protos_dot_common__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
